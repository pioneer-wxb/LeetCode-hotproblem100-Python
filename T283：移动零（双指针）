class solution
###
如果数组nums没有0，那么快慢指针始终指向同一个位置，每个位置自己和自己交换；
如果数组有0，快指针先走一步，此时慢指针对应的就是0，所以要交换，交换后将0全部移到末尾。

时间复杂度为：O(N)，其中N为序列长度，每个位置最多被遍历两次
空间复杂度为：O(1)，只需要常数的空间存放若干变量
###
def moveZeroes(self, nums):
    """
    :type nums: List[int]
    :rtype: None Do not return anything, modify nums in-place instead.
    """
    n = len(nums)
    left = right = 0
    while right < n:
      if nums[right] != 0:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
      right += 1
