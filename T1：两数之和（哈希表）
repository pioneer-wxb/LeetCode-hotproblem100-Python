class solution

  ###
  第一种定义方法是暴力枚举法，通过两个for循环来找到能够相加为target的i与j
  当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。
  而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x

  此算法的时间复杂度为：O(N^2)
  此算法的空间复杂度为：O(1)
  ###
  def twoSum(self, nums, target):
    n = len(nums)
    for i in range(n):
      for j in range(i+1, n):
        if nums[i] + nums[j] == target:
          return[i, j]
    return[]

  ###
  第二种方法是构建哈希表，通过键值对的方法，对nums由前向后依次遍历，寻找target-num的值是否在哈希表中
  注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。
  因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。
  使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。
  这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。

  此算法的时间复杂度为：O(N)
  此算法的空间复杂度为：O(1)
  ###
  def twoSum(self, nums, target):
    hashmap = dict()
    for i, num in enumerate(nums):
      if target - num in hashmap:
        return[hashmap[target - num], i]
      hashmap[nums[i]] = i
    return[]
