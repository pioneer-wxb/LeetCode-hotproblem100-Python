class solution
###
如果移动高的那一边，会有两种情况：
1、下一根柱子的高度比现在高，高度还取最小值低的那边，最大水量比原来小
2、下一根柱子的高度比现在低，高度比原来的最小值还小，最大水量比原来小

如果移动低的那一边，会有两种情况：
1、下一根柱子的高度比现在高，高度就可以取更高的值，最大水量不一定比原来小
2、下一根柱子的高度比现在低，高度比原来的最小值还小，最大水量比原来小
所以应该移动低的那一边

时间复杂度为：O(N)，双指针总计最多遍历整个数组一次。
空间复杂度为：O(1)，只需要额外的常数级别的空间。
###
def maxArea(self, height):
"""
:type height: List[int]
:rtype: int
"""
  left, right = 0, len(height)
  ans = 0
  while left < right:
    area = min(height[left], height[right]) * (right - left)
    ans = max(ans, area)
    if height[left] < height[right]:
      left += 1
    else:
      right -= 1
  return ans
